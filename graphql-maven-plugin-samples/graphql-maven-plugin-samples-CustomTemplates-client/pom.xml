<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.graphql-java-generator</groupId>
		<artifactId>graphql-maven-plugin-samples</artifactId>
		<version>1.5.1-SNAPSHOT</version>
	</parent>

	<artifactId>graphql-maven-plugin-samples-CustomTemplates-client</artifactId>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>graphql</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mode>client</mode>
					<templates>
						<QUERY_MUTATION_SUBSCRIPTION>templates/resttemplate/client_query_mutation_subscription_type.vm.java</QUERY_MUTATION_SUBSCRIPTION>
					</templates>
				</configuration>
				<dependencies>
					<!-- Dependency contains the custom template parametrized in plugin and a QueryExecutor bases on Spring Rest Template -->
					<dependency>
						<groupId>com.graphql-java-generator</groupId>
						<artifactId>graphql-maven-plugin-samples-CustomTemplates-resttemplate</artifactId>
						<version>${project.version}</version>
					</dependency>
				</dependencies>
			</plugin>


			<plugin>
				<!-- Execution of the integration tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.7.4</version>
				<executions>
					<execution>
						<id>start-tomcat</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-tomcat</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<container>
						<containerId>tomcat9x</containerId>
						<zipUrlInstaller>
							<url>https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/9.0.20/tomcat-9.0.20.zip</url>
							<downloadDir>${project.basedir}/downloads</downloadDir>
						</zipUrlInstaller>
					</container>
					<configuration>
						<properties>
							<cargo.logging>low</cargo.logging>
							<log>target/cargo.log</log>
							<cargo.protocol>https</cargo.protocol>
							<cargo.tomcat.connector.keyAlias>graphql</cargo.tomcat.connector.keyAlias>
							<cargo.tomcat.connector.keystoreFile>${project.basedir}/src/main/resources/keystore.jks</cargo.tomcat.connector.keystoreFile>
							<cargo.tomcat.connector.keystorePass>graphql</cargo.tomcat.connector.keystorePass>
							<cargo.tomcat.connector.keystoreType>JKS</cargo.tomcat.connector.keystoreType>
							<cargo.servlet.port>8443</cargo.servlet.port>
							<cargo.servlet.users>admin:tomcat:manager-gui</cargo.servlet.users>
						</properties>
					</configuration>
					<deployables>
						<deployable>
							<location>${basedir}/../graphql-maven-plugin-samples-StarWars-server/target/graphql-maven-plugin-samples-StarWars-server-${project.version}.war</location>
							<type>war</type>
							<properties>
								<context>/starwars</context>
							</properties>
						</deployable>
					</deployables>
				</configuration>
			</plugin>
			<plugin>
				<!-- We don't want to spam the repository with test/sample artefacts -->
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>

		<extensions>
			<!-- Adding these extensions prevents the error below, with JDK 9 and higher: -->
			<!-- NoSuchMethodError: 'java.lang.String javax.annotation.Resource.lookup()' -->
			<extension>
				<groupId>javax.annotation</groupId>
				<artifactId>javax.annotation-api</artifactId>
				<version>1.3.2</version>
			</extension>
			<extension>
				<groupId>javax.annotation</groupId>
				<artifactId>jsr250-api</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>


	</build>

	<dependencies>
		<!-- Dependency contains the custom template parametrized in plugin and a QueryExecutor bases on Spring Rest Template -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-maven-plugin-samples-CustomTemplates-resttemplate</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- Dependencies for tests -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-test</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>

		<!-- Dependencies for GraphQL -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-client-dependencies</artifactId>
			<type>pom</type>
		</dependency>
	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<reportSets>
					<reportSet>
						<id>non-aggregate</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

</project>
